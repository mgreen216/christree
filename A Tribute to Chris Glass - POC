<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>A Tribute to Chris Glass - POC</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        /* Styles remain the same as the previous version */
        body { font-family: 'Inter', sans-serif; display: flex; flex-direction: column; align-items: center; min-height: 100vh; background-color: #f0f4f8; padding: 2rem; position: relative; }
        #visualization { border: 1px solid #d1d5db; background-color: #ffffff; border-radius: 0.5rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); width: 100%; max-width: 800px; height: 500px; overflow: hidden; position: relative; border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-bottom: none; }
        .input-area { width: 100%; max-width: xl; background-color: white; padding: 1.5rem; border-radius: 0.5rem; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); margin-bottom: 1.5rem; }
        textarea { resize: none; }
        button { transition: background-color 0.3s ease, transform 0.1s ease; }
        button:hover { transform: translateY(-1px); }
        button:active { transform: translateY(0px); }
        #message-box { position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); padding: 10px 20px; background-color: rgba(0, 0, 0, 0.7); color: white; border-radius: 5px; display: none; z-index: 1000; font-size: 0.9rem; }
        .trunk { fill: #5D4037; stroke: #4E342E; stroke-width: 1; }
        .branch { fill: none; stroke: #6D4C41; stroke-linecap: round; stroke-linejoin: round; }
        .fruit { stroke: rgba(0,0,0,0.2); stroke-width: 0.5px; cursor: pointer; transition: transform 0.2s ease-out; }
        .leaf { stroke: #388E3C; stroke-width: 0.5px; }
        .new-leaf { stroke: #66BB6A; stroke-width: 0.5px; cursor: pointer; transition: transform 0.2s ease-out; }
        @keyframes sway { 0%, 100% { transform-origin: bottom center; transform: rotate(-1deg); } 50% { transform-origin: bottom center; transform: rotate(1deg); } }
        .leaf-sway { animation: sway 5s ease-in-out infinite alternate; }
        @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.2); } 100% { transform: scale(1); } }
        .pulse-effect { animation: pulse 0.6s ease-out 1; }
        #tooltip { position: absolute; display: none; background-color: rgba(0, 0, 0, 0.8); color: white; padding: 8px 12px; border-radius: 4px; font-size: 0.85rem; max-width: 250px; text-align: center; pointer-events: none; z-index: 1010; white-space: normal; box-shadow: 0 2px 4px rgba(0,0,0,0.2); }
        #text-feed-container { width: 100%; max-width: 800px; height: 100px; background-color: #e2d8ce; border: 1px solid #d1c7bd; border-top: none; border-radius: 0.5rem; border-top-left-radius: 0; border-top-right-radius: 0; padding: 10px 15px; overflow: hidden; position: relative; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); margin-top: 0; margin-bottom: 1.5rem; }
        #text-feed { height: 100%; display: flex; flex-direction: column; justify-content: flex-start; }
        #text-feed p { color: #4d4030; font-size: 0.9rem; padding: 4px 0; margin: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; opacity: 1; transition: opacity 0.5s ease-in-out; flex-shrink: 0; }
        #text-feed p.fade-out { opacity: 0; }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
</head>
<body class="bg-gradient-to-br from-yellow-50 via-red-50 to-gray-100">

    <h1 class="text-3xl font-bold mb-4" style="color: #8C2232;">A Tribute to Chris Glass</h1>
    <p class="text-gray-700 mb-6 text-center max-w-2xl">
        Share a message of appreciation for Chris. Each contribution helps our tree flourish. Hover over fruit or new leaves to see the messages, and watch the roots below!
    </p>

    <div class="input-area">
        <label for="messageInput" class="block text-sm font-medium text-gray-700 mb-2">Your Message for Chris:</label>
        <textarea id="messageInput" rows="3" class="w-full p-3 border border-gray-300 rounded-md focus:ring-yellow-500 focus:border-yellow-500" placeholder="Type your heartfelt words for Chris here..."></textarea>
        <button id="submitButton" class="mt-4 w-full text-white font-semibold py-2 px-4 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-600" style="background-color: #8C2232;">
             Add to the Tribute Tree
        </button>
    </div>

    <div class="w-full max-w-3xl">
        <h2 class="text-xl font-semibold mb-0 text-center" style="color: #8C2232;">Our Flourishing Tree for Chris</h2>
        <div id="visualization">
            </div>
        <div id="text-feed-container">
            <div id="text-feed">
                </div>
        </div>
    </div>

    <div id="message-box"></div>
    <div id="tooltip"></div>

    <script>
        // --- Configuration ---
        const vizWidth = 800; const vizHeight = 500; const maxItems = 200; const fruitBaseSize = 6; const fruitSizeVariance = 12; const leafBaseSize = 4; const leafSizeVariance = 5; const staticLeafCount = 30; const sparkleCount = 5; const highlyPositiveThreshold = 0.8;
        const maxFeedMessages = 5;
        // --- NEW: Backend API Endpoint URL ---
        // Replace with your actual backend endpoint URL once deployed
        const API_ENDPOINT = '/api/submit-message'; // Example: use relative path if frontend/backend are same domain, or full URL

        // Colors (Remain the same)
        const bcMaroon = "#8C2232"; const bcGold = "#F3D03E"; const lightGold = "#FAD961"; const darkMaroon = "#A54857"; const neutralGray = "#A0A0A0"; const darkGray = "#708090"; const leafGreen = "#4CAF50"; const newLeafGreen = "#81C784"; const branchColor = "#6D4C41"; const trunkColor = "#5D4037"; const sparkleColor = "#FFD700";

        // --- D3 Setup --- (Remains the same)
        const svg = d3.select("#visualization").append("svg").attr("viewBox", `0 0 ${vizWidth} ${vizHeight}`).attr("preserveAspectRatio", "xMidYMid meet").style("width", "100%").style("height", "100%");
        const defs = svg.append("defs");
        const goldGradient = defs.append("radialGradient").attr("id", "goldGradient").attr("cx", "50%").attr("cy", "50%").attr("r", "50%").attr("fx", "50%").attr("fy", "50%"); goldGradient.append("stop").attr("offset", "0%").style("stop-color", lightGold); goldGradient.append("stop").attr("offset", "100%").style("stop-color", bcGold);
        const maroonGradient = defs.append("radialGradient").attr("id", "maroonGradient").attr("cx", "50%").attr("cy", "50%").attr("r", "50%").attr("fx", "50%").attr("fy", "50%"); maroonGradient.append("stop").attr("offset", "0%").style("stop-color", darkMaroon); maroonGradient.append("stop").attr("offset", "100%").style("stop-color", bcMaroon);
        const grayGradient = defs.append("radialGradient").attr("id", "grayGradient").attr("cx", "50%").attr("cy", "50%").attr("r", "50%").attr("fx", "50%").attr("fy", "50%"); grayGradient.append("stop").attr("offset", "0%").style("stop-color", neutralGray); grayGradient.append("stop").attr("offset", "100%").style("stop-color", darkGray);

        // --- Draw Static Tree --- (Remains the same)
        const treeGroup = svg.append("g").attr("class", "tree");
        const trunkWidth = 40; treeGroup.append("rect").attr("class", "trunk").attr("x", vizWidth / 2 - trunkWidth / 2).attr("y", vizHeight * 0.7).attr("width", trunkWidth).attr("height", vizHeight * 0.3).attr("rx", 5).attr("ry", 5).style("fill", trunkColor);
        const branchPathData = [ { d: `M ${vizWidth/2},${vizHeight*0.7} Q ${vizWidth*0.3},${vizHeight*0.6} ${vizWidth*0.25},${vizHeight*0.3}`, sw: 12 }, { d: `M ${vizWidth*0.25},${vizHeight*0.3} Q ${vizWidth*0.15},${vizHeight*0.2} ${vizWidth*0.2},${vizHeight*0.1}`, sw: 8 }, { d: `M ${vizWidth*0.25},${vizHeight*0.3} Q ${vizWidth*0.3},${vizHeight*0.15} ${vizWidth*0.35},${vizHeight*0.1}`, sw: 8 }, { d: `M ${vizWidth/2},${vizHeight*0.7} Q ${vizWidth*0.7},${vizHeight*0.6} ${vizWidth*0.75},${vizHeight*0.3}`, sw: 12 }, { d: `M ${vizWidth*0.75},${vizHeight*0.3} Q ${vizWidth*0.85},${vizHeight*0.2} ${vizWidth*0.8},${vizHeight*0.1}`, sw: 8 }, { d: `M ${vizWidth*0.75},${vizHeight*0.3} Q ${vizWidth*0.7},${vizHeight*0.15} ${vizWidth*0.65},${vizHeight*0.1}`, sw: 8 }, { d: `M ${vizWidth/2},${vizHeight*0.7} Q ${vizWidth*0.5},${vizHeight*0.4} ${vizWidth*0.5},${vizHeight*0.2}`, sw: 10 }, { d: `M ${vizWidth*0.5},${vizHeight*0.2} Q ${vizWidth*0.45},${vizHeight*0.1} ${vizWidth*0.5},${vizHeight*0.05}`, sw: 7 }, ];
        const branches = treeGroup.selectAll(".branch").data(branchPathData).enter().append("path").attr("class", "branch").attr("d", d => d.d).style("stroke", branchColor).style("stroke-width", d => d.sw);
        const branchNodes = branches.nodes();

        // --- Groups for dynamic elements --- (Remains the same)
        const staticLeafGroup = svg.append("g").attr("class", "static-leaves");
        const fruitGroup = svg.append("g").attr("class", "fruits");
        const dynamicLeafGroup = svg.append("g").attr("class", "dynamic-leaves");
        const sparkleGroup = svg.append("g").attr("class", "sparkles");

        let dynamicItemsData = [];
        let feedMessagesData = [];

        // --- Helper: Get point along a path --- (Remains the same)
        function getPointOnBranch(branchIndex, t) { const node = branchNodes[branchIndex]; const pathLength = node.getTotalLength(); return node.getPointAtLength(pathLength * t); }

        // --- Draw Static Leaves --- (Remains the same)
        function drawStaticLeaves() { const staticLeavesData = []; for (let i = 0; i < staticLeafCount; i++) { const randomBranchIndex = Math.floor(Math.random() * branchNodes.length); const t = Math.random() * 0.5 + 0.5; const point = getPointOnBranch(randomBranchIndex, t); const angle = Math.random() * Math.PI * 2; const offsetDist = Math.random() * 15 + 5; point.x += offsetDist * Math.cos(angle); point.y += offsetDist * Math.sin(angle); point.x = Math.max(leafBaseSize, Math.min(vizWidth - leafBaseSize, point.x)); point.y = Math.max(leafBaseSize, Math.min(vizHeight - leafBaseSize, point.y)); staticLeavesData.push({ x: point.x, y: point.y, size: leafBaseSize + Math.random() * leafSizeVariance, rotation: Math.random() * 60 - 30 }); } staticLeafGroup.selectAll("ellipse.leaf").data(staticLeavesData).enter().append("ellipse").attr("class", "leaf leaf-sway").attr("cx", d => d.x).attr("cy", d => d.y).attr("rx", d => d.size * 0.6).attr("ry", d => d.size).style("fill", leafGreen).attr("transform", d => `rotate(${d.rotation}, ${d.x}, ${d.y})`); }

        // --- DOM Elements --- (Remains the same)
        const messageInput = document.getElementById('messageInput');
        const submitButton = document.getElementById('submitButton');
        const messageBox = document.getElementById('message-box');
        const tooltip = document.getElementById('tooltip');
        const textFeed = d3.select('#text-feed');

        // --- Simulated Sentiment Analysis --- (Remains the same)
        function simulateSentiment(text) { const length = text.trim().length; let score = 0; if (length === 0) return { score: 0, category: 'neutral' }; score += Math.min(length / 100, 0.5); const positiveKeywords = ['thank', 'appreciate', 'inspire', 'grateful', 'amazing', 'wonderful', 'excellent', 'great', 'love', 'joy', 'proud', 'support', 'growth', 'flourish', 'congrats', 'congratulations']; const negativeKeywords = ['concern', 'challenge', 'difficult', 'improve', 'but', 'however']; const words = text.toLowerCase().split(/\s+/); words.forEach(word => { if (positiveKeywords.includes(word)) score += 0.25; if (negativeKeywords.includes(word)) score -= 0.05; }); score = Math.max(-0.5, Math.min(1, score)); let category = 'neutral'; if (score > 0.3) category = 'positive'; else if (score < 0) category = 'negative'; return { score, category }; }

        // --- Map Sentiment to Visuals --- (Remains the same)
        function mapSentimentToVisuals(sentiment, messageText) { const { score, category } = sentiment; let fruitGradientUrl, fruitSize, leafSize = null, leafColor = null, leafMessage = null; if (category === 'positive') { fruitGradientUrl = "url(#goldGradient)"; fruitSize = fruitBaseSize + Math.max(0, score) * fruitSizeVariance; leafSize = leafBaseSize + Math.max(0, score) * leafSizeVariance * 0.7; leafColor = newLeafGreen; leafMessage = messageText; } else if (category === 'negative') { fruitGradientUrl = "url(#grayGradient)"; fruitSize = fruitBaseSize + Math.max(0, score) * fruitSizeVariance; } else { fruitGradientUrl = "url(#maroonGradient)"; fruitSize = fruitBaseSize; } return { type: 'fruit', size: fruitSize, color: fruitGradientUrl, category: category, score: score, message: messageText, ...(leafSize && { leafData: { type: 'leaf', size: leafSize, color: leafColor, message: leafMessage } }) }; }

        // --- Calculate Item Position --- (Remains the same)
        function calculateItemPosition(itemSize) { const randomBranchIndex = Math.floor(Math.random() * branchNodes.length); const t = Math.random() * 0.6 + 0.4; const point = getPointOnBranch(randomBranchIndex, t); const angle = Math.random() * Math.PI * 2; const offsetDist = Math.random() * 10 + 5; point.x += offsetDist * Math.cos(angle); point.y -= offsetDist * Math.sin(angle); point.x = Math.max(itemSize, Math.min(vizWidth - itemSize, point.x)); point.y = Math.max(itemSize, Math.min(vizHeight - itemSize, point.y)); return { x: point.x, y: point.y }; }

        // --- Create Sparkles --- (Remains the same)
        function createSparkles(x, y) { for (let i = 0; i < sparkleCount; i++) { const angle = Math.random() * 2 * Math.PI; const distance = Math.random() * 15 + 5; const startX = x + distance * Math.cos(angle); const startY = y + distance * Math.sin(angle); const sparkleSize = Math.random() * 2 + 1; sparkleGroup.append("circle").attr("cx", startX).attr("cy", startY).attr("r", 0).style("fill", sparkleColor).style("opacity", 1).transition().duration(600 + Math.random() * 400).ease(d3.easeQuadOut).attr("r", sparkleSize).style("opacity", 0).remove(); } }

         // --- Tooltip Hover Handlers --- (Remains the same)
         function handleMouseOver(event, d) { d3.select(this).transition().duration(150).attr("transform", `translate(${d.x || 0}, ${d.y || 0}) scale(1.4) translate(${-d.x || 0}, ${-d.y || 0})`); if (d.message) { tooltip.textContent = d.message; tooltip.style.display = 'block'; tooltip.style.left = (event.pageX + 15) + 'px'; tooltip.style.top = (event.pageY + 15) + 'px'; } }
         function handleMouseOut(event, d) { d3.select(this).transition().duration(150).attr("transform", `translate(${d.x || 0}, ${d.y || 0}) scale(1.0) translate(${-d.x || 0}, ${-d.y || 0})`); tooltip.style.display = 'none'; }

        // --- Update Tree Visualization --- (Remains the same)
        function updateTreeVisualization(visualParams, messageText) {
            const fruitPosition = calculateItemPosition(visualParams.size); const newFruit = { ...visualParams, ...fruitPosition, id: Date.now() + Math.random(), message: messageText }; dynamicItemsData.push(newFruit); if (visualParams.leafData) { const leafPosition = calculateItemPosition(visualParams.leafData.size); leafPosition.x += (Math.random() - 0.5) * 10; leafPosition.y += (Math.random() - 0.5) * 10; const newLeaf = { ...visualParams.leafData, ...leafPosition, id: Date.now() + Math.random(), message: messageText }; dynamicItemsData.push(newLeaf); } if (dynamicItemsData.length > maxItems) { dynamicItemsData.shift(); }
            const fruits = fruitGroup.selectAll("circle.fruit").data(dynamicItemsData.filter(d => d.type === 'fruit'), d => d.id); fruits.exit().transition().duration(600).attr("r", 0).style("opacity", 0).remove(); fruits.enter().append("circle").attr("class", "fruit").attr("cx", d => d.x).attr("cy", d => d.y).attr("r", 0).style("opacity", 0).attr("fill", d => d.color).on("mouseover", handleMouseOver).on("mouseout", handleMouseOut).transition().duration(900).ease(d3.easeBounceOut).attr("r", d => d.size).style("opacity", 0.9).each(function(d) { const element = d3.select(this); element.classed("pulse-effect", true); setTimeout(() => element.classed("pulse-effect", false), 600); if (d.category === 'positive' && d.score >= highlyPositiveThreshold) { createSparkles(d.x, d.y); } });
            const leaves = dynamicLeafGroup.selectAll("ellipse.new-leaf").data(dynamicItemsData.filter(d => d.type === 'leaf'), d => d.id); leaves.exit().transition().duration(600).attr("rx", 0).attr("ry", 0).style("opacity", 0).remove(); leaves.enter().append("ellipse").attr("class", "new-leaf leaf-sway").attr("cx", d => d.x).attr("cy", d => d.y).attr("rx", 0).attr("ry", 0).style("opacity", 0).style("fill", d => d.color).attr("transform", d => `rotate(${Math.random()*40-20}, ${d.x}, ${d.y})`).on("mouseover", handleMouseOver).on("mouseout", handleMouseOut).transition().duration(1000).ease(d3.easeBackOut).attr("rx", d => d.size * 0.6).attr("ry", d => d.size).style("opacity", 0.8).each(function() { const element = d3.select(this); element.classed("pulse-effect", true); setTimeout(() => element.classed("pulse-effect", false), 600); });
        }

        // --- Update Text Feed --- (Remains the same)
        function updateTextFeed(newMessage) {
            feedMessagesData.unshift({ id: Date.now(), text: newMessage });
            if (feedMessagesData.length > maxFeedMessages) { feedMessagesData.pop(); }
            const messages = textFeed.selectAll("p").data(feedMessagesData, d => d.id);
            messages.exit().transition().duration(500).style("opacity", 0).remove();
            messages.enter().insert("p", ":first-child").attr("class", "message-item").style("opacity", 0).text(d => d.text).transition().duration(500).style("opacity", 1);
        }

        // --- Show Notification Message --- (Remains the same)
        function showMessage(text, duration = 3000) { messageBox.textContent = text; messageBox.style.display = 'block'; setTimeout(() => { messageBox.style.display = 'none'; }, duration); }

        // --- Submit Message to Backend --- NEW Function
        async function submitMessageToBackend(messageText) {
            try {
                const response = await fetch(API_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: messageText }), // Send message as JSON
                });

                if (!response.ok) {
                    // Handle HTTP errors (e.g., 404, 500)
                    console.error('Network response was not ok:', response.statusText);
                    showMessage(`Error saving message: ${response.statusText}`, 4000); // Show error to user
                    return false; // Indicate failure
                }

                // Optional: You could process a response from the backend if it sends one
                // const result = await response.json();
                // console.log('Backend response:', result);
                return true; // Indicate success

            } catch (error) {
                // Handle network errors (e.g., backend down, CORS issues)
                console.error('Error submitting message:', error);
                showMessage('Network error: Could not save message.', 4000); // Show error to user
                return false; // Indicate failure
            }
        }


        // --- Event Listener --- MODIFIED
        submitButton.addEventListener('click', async () => { // Make async to await backend call
             const message = messageInput.value;
             if (!message.trim()) {
                 showMessage("Please enter a message first.");
                 return;
             }

             // --- NEW: Attempt to send message to backend FIRST ---
             const success = await submitMessageToBackend(message);

             // --- Only update visuals if backend submission was successful (or handle differently) ---
             // You might choose to update visuals anyway, but indicate if saving failed
             if (success) {
                 // Existing logic to update local visualization
                 const sentiment = simulateSentiment(message);
                 const visualParams = mapSentimentToVisuals(sentiment, message);
                 updateTreeVisualization(visualParams, message);
                 updateTextFeed(message);

                 messageInput.value = ''; // Clear input only on success
                 let feedback = `Message added! (Sentiment: ${sentiment.category})`;
                 if (visualParams.leafData) {
                     feedback = `Message added & growing! (Sentiment: ${sentiment.category})`;
                 }
                 showMessage(feedback);
             } else {
                 // Keep message in input box if saving failed, allowing user to retry?
                 // Or clear it but show a persistent error? Your choice.
                 // showMessage("Failed to save message. Please try again.", 5000);
             }
        });

        // --- Initial State --- (Remains the same)
        drawStaticLeaves();
        console.log("Tribute to Chris Glass POC Initialized (with Fetch).");

    </script>

</body>
</html>
